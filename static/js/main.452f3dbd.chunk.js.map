{"version":3,"sources":["components/Firework/Data/CursorData.js","components/Firework/Data/BallData.js","components/Firework/Data/CanonData.js","components/Firework/Firework.js","components/Canvas/Canvas.js","components/Firework/Draw/CanvasDraw.js","App.js","index.js","components/Canvas/Canvas.css"],"names":["CURRENT_MOUSE_POSITION","x","y","ANGLE_RADIAN_TO_MOUSE","ORIGIN","calculateLineAngle","from","to","deltaX","deltaY","Math","atan","PI","CIRCLE_ARRAY","Cursor_Circle","position","current_radius","end_radius","color","speed","this","strokeColor","ctx","canvas","beginPath","strokeStyle","shadowBlur","fillStyle","shadowColor","lineWidth","arc","fill","stroke","closePath","ele","index","splice","BALL_ARRAY","RANDOM_COLOR_ARRAY","Ball","radius","initialSpeed","angle","life","accel","deltaPosition","velocity","cos","sin","isTouching","makeExplosion","height","width","random","floor","finalSpeed","sqrt","AppendBallObject","origin","currentAngle","random_color_number","length","ramdom_color","newBall","push","ballAnimationHandler","forEach","createBall","drawBall","update","updateMotion","CANON_DATA","thick","moveTo","endPoint","lineTo","canonAnimation","CTX","CVS","drawCanon","undefined","MOUSE_DOWN","BALL_THROW","console","log","clickHandler","e","mouseMoveHandler","touches","pageX","target","offsetLeft","pageY","offsetTop","offsetX","offsetY","setTimeout","mouseDownHandler","newCircle","AppendCircle","mouseUpHandler","Canvas","props","CanvasRef","useRef","ContextRef","useEffect","cvs","current","getContext","offsetHeight","offsetWidth","addEventListener","setInterval","clearRect","rect","StartAnimate","window","resizeHandler","cancelAnimationFrame","className","classes","ref","CanvasStyle","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.452f3dbd.chunk.js","sourcesContent":["\r\nexport let CURRENT_MOUSE_POSITION = {\r\n    x: 0,\r\n    y: 0,\r\n}\r\n\r\nexport let ANGLE_RADIAN_TO_MOUSE = (ORIGIN) => {\r\n    return calculateLineAngle(ORIGIN, CURRENT_MOUSE_POSITION)\r\n}\r\n\r\nexport const calculateLineAngle = (from, to) => {\r\n    let deltaX = to.x-from.x\r\n    let deltaY = -(to.y-from.y)\r\n\r\n    let radian = undefined \r\n    if(deltaX >= 0)\r\n        radian = Math.atan(deltaY/deltaX);\r\n    else{\r\n        radian = Math.PI - Math.atan(-deltaY/deltaX);\r\n    }\r\n\r\n    return radian\r\n}\r\n\r\n//cursor show class\r\n\r\nconst CIRCLE_ARRAY = [];\r\n\r\nclass Cursor_Circle{\r\n    constructor(position, current_radius, end_radius, color, speed){\r\n        this.position = position\r\n        this.current_radius = current_radius\r\n        this.end_radius = end_radius\r\n        this.strokeColor = color\r\n        this.speed = speed\r\n    }\r\n\r\n    makeCircle(ctx, canvas){\r\n        ctx.beginPath();\r\n\r\n        ctx.strokeStyle = \"white\";\r\n        ctx.shadowBlur = 1;\r\n        ctx.fillStyle = \"white\"\r\n        ctx.shadowColor = \"white\";\r\n        ctx.lineWidth = 2;\r\n\r\n        ctx.arc(this.position.x, this.position.y, this.current_radius, 0, Math.PI*2, false);\r\n\r\n        ctx.fill()\r\n        ctx.stroke();\r\n        ctx.closePath()\r\n    }\r\n\r\n    updateCircle(ele, index){\r\n        if(this.current_radius >= this.end_radius){\r\n            CIRCLE_ARRAY.splice(index, 1);\r\n            return 0;\r\n        }\r\n\r\n        // this.position.x = CURRENT_MOUSE_POSITION.x\r\n        // this.position.y = CURRENT_MOUSE_POSITION.y\r\n\r\n        this.current_radius += this.speed\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const AppendCircle = () => {\r\n\r\n    let position = {\r\n        ...CURRENT_MOUSE_POSITION\r\n    }\r\n    let newCircle = new Cursor_Circle(position, 0, 50, \"white\", 5)\r\n    CIRCLE_ARRAY.push(newCircle)\r\n}\r\n\r\nconst drawCircle = (ctx, canvas) => {\r\n    CIRCLE_ARRAY.forEach(ele=>{\r\n        ele.makeCircle(ctx, canvas)\r\n    })\r\n}\r\n\r\nconst updateCircle = (ctx, canvas) => {\r\n    CIRCLE_ARRAY.forEach((ele, index)=>{\r\n        ele.updateCircle(index, canvas);\r\n    })\r\n}\r\n\r\n\r\nexport const cursorCircleAnimation = (ctx, canvas) => {\r\n    drawCircle(ctx, canvas);\r\n    updateCircle(ctx, canvas);   \r\n}","import { ANGLE_RADIAN_TO_MOUSE } from \"./CursorData\"\r\n\r\nexport const BALL_ARRAY = []\r\n// const RANDOM_COLOR_ARRAY = [\r\n//    \"white\", \"#c63347\", \"#792bb2\", \"#2e42cb\", \"#f75781\", \"#e365e4\", \"#faefc4\", \"#fa5348\"\r\n// ]\r\nconst RANDOM_COLOR_ARRAY = [\r\n   \"white\", \"red\", \"blue\", \"lightgreen\", \"yellow\", \"pink\", \"orange\"\r\n]\r\n\r\nclass Ball{\r\n    constructor(radius, position, initialSpeed, angle, color, shadowColor, life, accel){\r\n        this.radius = radius\r\n        this.position = position\r\n        this.deltaPosition = {\r\n            x: 0,\r\n            y: 0,\r\n        }\r\n        this.velocity = {\r\n            x: initialSpeed*Math.cos(angle),\r\n            y: -initialSpeed*Math.sin(angle),\r\n        }\r\n        this.accel = accel\r\n        this.angle = angle\r\n        this.color = color\r\n        this.shadowColor = shadowColor\r\n        this.isTouching = false\r\n        this.life = life\r\n    }\r\n\r\n    createBall(ctx, canvas){\r\n        ctx.beginPath();\r\n        \r\n        ctx.fillStyle = this.color;\r\n        ctx.shadowBlur = 30;\r\n        ctx.shadowColor = this.shadowColor;        \r\n        \r\n        ctx.arc(this.position.x, this.position.y, this.radius, 0, Math.PI*2, false)\r\n\r\n        ctx.fill();\r\n        ctx.closePath();\r\n    }\r\n\r\n    update(index, canvas){  \r\n\r\n        if(this.life <= 0){\r\n            if(this.radius < 8)\r\n             BALL_ARRAY.splice(index, 1);\r\n            else{\r\n                makeExplosion(index, canvas)\r\n            }\r\n        }\r\n\r\n        //velocity increase\r\n        //y end\r\n        if(this.position.y+this.radius+this.deltaPosition.y > canvas.height || this.position.y+this.deltaPosition.y < this.radius){\r\n            this.velocity = {\r\n                x: this.velocity.x,\r\n                y: -this.velocity.y\r\n            }\r\n        }\r\n        //x end \r\n        if(this.position.x+this.radius+this.deltaPosition.x > canvas.width || this.position.x+this.deltaPosition.x < this.radius){\r\n            this.velocity = {\r\n                x: -this.velocity.x,\r\n                y: this.velocity.y\r\n            }\r\n        }\r\n        if(!(this.position.y+this.radius+this.deltaPosition.y > canvas.height || this.position.y+this.deltaPosition.y < this.radius || this.position.x+this.radius+this.deltaPosition.x > canvas.width || this.position.x+this.deltaPosition.x < this.radius)){\r\n            this.velocity = {\r\n                x: this.velocity.x + this.accel.x,\r\n                y: this.velocity.y + this.accel.y\r\n            }\r\n        }\r\n\r\n        //new change in position position set\r\n        this.deltaPosition = {\r\n            x: this.velocity.x,\r\n            y: this.velocity.y,\r\n        }\r\n        this.life -= 1;\r\n        // finally the ball will go to \r\n        this.position = {\r\n            x: this.position.x + this.deltaPosition.x,\r\n            y: this.position.y + this.deltaPosition.y\r\n        }\r\n    }\r\n\r\n}\r\n\r\n//explision\r\nconst makeExplosion = (index, canvas) => {\r\n    //remove that ball element\r\n    //adding random number of ball to explision\r\n    let max_ball_accured = 10;\r\n    let ball_radius = 5\r\n    let random = Math.floor(Math.random(max_ball_accured))+5 //range of ball is 5 to 10\r\n    let finalSpeed = Math.sqrt(BALL_ARRAY[index].velocity.x*BALL_ARRAY[index].velocity.x + BALL_ARRAY[index].velocity.y*BALL_ARRAY[index].velocity.y)\r\n    while(random--){\r\n        // console.log(random)\r\n        let angle = Math.PI*Math.random(2)\r\n        let life = Math.floor(Math.random()*10)+20\r\n        let accel = {x: 0, y: 0.1}\r\n        AppendBallObject(canvas, ball_radius, finalSpeed, life, BALL_ARRAY[index].position, angle, accel)\r\n    }\r\n    // console.log(\"explide\")\r\n    BALL_ARRAY.splice(index, 1);\r\n}\r\n\r\n\r\nexport const AppendBallObject = (canvas, radius, initialSpeed, life, position, angle, accel) => {\r\n    let origin = {\r\n        x: canvas.width/2,\r\n        y: canvas.height-20\r\n    }\r\n    if(position){\r\n        origin = {\r\n            ...position\r\n        }\r\n    }\r\n    let currentAngle = ANGLE_RADIAN_TO_MOUSE(origin) //angle in radian\r\n\r\n    if(angle){\r\n        currentAngle = angle\r\n    }\r\n    if(!accel){\r\n        accel = {\r\n            x: 0,\r\n            y: 0.5\r\n        }\r\n    }\r\n\r\n    let random_color_number = Math.floor(Math.random()*RANDOM_COLOR_ARRAY.length)\r\n    let ramdom_color = RANDOM_COLOR_ARRAY[random_color_number]\r\n\r\n    let newBall = new Ball(radius, origin, initialSpeed, currentAngle, ramdom_color, ramdom_color, life, accel)\r\n    BALL_ARRAY.push(newBall)\r\n}\r\n\r\nexport const drawBall = (ctx, canvas) => {\r\n    BALL_ARRAY.forEach(ele=>{\r\n        ele.createBall(ctx, canvas)\r\n    })\r\n}\r\n\r\nexport const updateMotion = (canvas) => {\r\n\r\n    BALL_ARRAY.forEach((ele, index)=>{\r\n        ele.update(index, canvas);\r\n    })\r\n}\r\n\r\nexport const ballAnimationHandler = (ctx, canvas) =>{\r\n\r\n    drawBall(ctx, canvas);\r\n    updateMotion(canvas);\r\n}","import {ANGLE_RADIAN_TO_MOUSE} from \"../Data/CursorData\"\r\n\r\nclass CANON_DATA{\r\n    constructor(length, thick, angle, color, x, y){\r\n        this.length = length\r\n        this.thick = thick\r\n        this.angle = angle\r\n        this.color = color\r\n        this.position = {\r\n            x: x,\r\n            y: y,\r\n        }\r\n    }\r\n\r\n    drawCanon(ctx, canvas){\r\n        ctx.beginPath();\r\n\r\n        ctx.strokeStyle = this.color\r\n        ctx.lineWidth = this.thick;\r\n        ctx.shadowBlur = 0;\r\n\r\n\r\n        ctx.moveTo(this.position.x, this.position.y)\r\n        let endPoint = getCanonEndPoint(this.position, this.length, this.angle)\r\n        ctx.lineTo(endPoint.x, endPoint.y)\r\n\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction getCanonEndPoint(origin, length, angle){\r\n    //angle in radian\r\n    let endPoint = {\r\n        x: origin.x + length*Math.cos(angle),\r\n        y: origin.y - length*Math.sin(angle)\r\n    } \r\n\r\n    return endPoint;\r\n\r\n}\r\n\r\nconst drawCanon = (ctx, canvas) => {\r\n    let origin = {\r\n        x: canvas.width/2,\r\n        y: canvas.height-10\r\n    }\r\n    let currentAngle = ANGLE_RADIAN_TO_MOUSE(origin)\r\n    let CANON = new CANON_DATA(40, 20, currentAngle, \"white\", origin.x, origin.y)\r\n    CANON.drawCanon(ctx, canvas)\r\n}\r\n\r\nexport const canonAnimation = (CTX, CVS) => {\r\n    drawCanon(CTX, CVS);\r\n}","import { AppendBallObject, ballAnimationHandler} from \"./Data/BallData\";\r\nimport {makeBackground} from \"./Draw/CanvasDraw\"\r\nimport {CURRENT_MOUSE_POSITION, AppendCircle, cursorCircleAnimation} from \"./Data/CursorData\"\r\nimport { canonAnimation } from \"./Data/CanonData\";\r\n\r\nlet CVS = undefined\r\nlet CTX = undefined\r\n\r\nlet MOUSE_DOWN = false\r\nlet BALL_THROW = true\r\n\r\nlet AnimationID = undefined\r\n\r\nconsole.log(\"Hello Firework\")\r\n\r\nexport const setContextAndCanvas = (cvs, ctx) => {\r\n    CVS = cvs;\r\n    CTX = ctx;\r\n}\r\n\r\nexport const initializeAllVarible = () => {\r\n\r\n}\r\n\r\nexport const initializeAllEventListener = () => {\r\n    CVS.addEventListener(\"click\", clickHandler)\r\n    CVS.addEventListener(\"mousemove\", mouseMoveHandler)\r\n    CVS.addEventListener(\"mousedown\", mouseDownHandler)\r\n    CVS.addEventListener(\"mouseup\", mouseUpHandler)\r\n\r\n    CVS.addEventListener(\"touchstart\", mouseDownHandler)\r\n    CVS.addEventListener(\"touchmove\", mouseMoveHandler)\r\n    CVS.addEventListener(\"touchend\", mouseUpHandler)\r\n}\r\n\r\nexport const StartAnimate = () => {\r\n    CTX.clearRect(0, 0, CVS.width, CVS.height)\r\n\r\n    makeBackground(CTX, CVS);\r\n    ballAnimationHandler(CTX, CVS)\r\n\r\n    canonAnimation(CTX, CVS)\r\n\r\n    // cursorCircleAnimation(CTX, CVS)\r\n}\r\n\r\n\r\nconst clickHandler = (e) =>{\r\n    console.log(\"Clicl Handler\")\r\n    AppendBallObject(CVS, 8, 25, 50) // canvas radius, speed, life\r\n\r\n}\r\n\r\nconst mouseMoveHandler = (e) => {\r\n\r\n    if(e.touches){\r\n        CURRENT_MOUSE_POSITION.x = e.touches[0].pageX - e.touches[0].target.offsetLeft; \r\n        CURRENT_MOUSE_POSITION.y = e.touches[0].pageY - e.touches[0].target.offsetTop; \r\n    }else{\r\n        CURRENT_MOUSE_POSITION.x = e.offsetX\r\n        CURRENT_MOUSE_POSITION.y = e.offsetY\r\n    }\r\n    console.log(CURRENT_MOUSE_POSITION)\r\n\r\n        if(MOUSE_DOWN && BALL_THROW){\r\n        AppendBallObject(CVS, 8, 25, 50) // canvas radius, speed, life\r\n        // AppendCircle();\r\n        BALL_THROW = false\r\n        setTimeout(()=>{\r\n            BALL_THROW = true\r\n        }, 50)\r\n    }\r\n}\r\nconst mouseDownHandler = (e) => {\r\n    MOUSE_DOWN = true\r\n    AppendCircle();\r\n}\r\nconst mouseUpHandler = (e) => {\r\n    MOUSE_DOWN = false\r\n}\r\n\r\nexport const cleanUpFunction = () => {\r\n    cancelAnimationFrame(AnimationID)\r\n}","import React, {useEffect, useRef} from 'react'\r\n\r\n//components\r\nimport { initializeAllEventListener, initializeAllVarible, setContextAndCanvas, StartAnimate, cleanUpFunction} from '../Firework/Firework'\r\n\r\n//classes\r\nimport classes from \"./Canvas.css\"\r\n\r\nconst Canvas = (props) => {\r\n\r\n    const CanvasRef = useRef(null)\r\n    const ContextRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        \r\n        const Canvas = CanvasRef.current;\r\n        ContextRef.current = Canvas.getContext(\"2d\");\r\n        \r\n        CanvasRef.current.height = CanvasRef.current.offsetHeight\r\n        CanvasRef.current.width = CanvasRef.current.offsetWidth\r\n\r\n        setContextAndCanvas(CanvasRef.current, ContextRef.current);\r\n        initializeAllVarible();\r\n        initializeAllEventListener();\r\n        \r\n        setInterval(()=>{\r\n            StartAnimate()\r\n\r\n        }, 1000/60)\r\n\r\n        window.addEventListener(\"resize\", resizeHandler);\r\n\r\n        return()=>{\r\n            //packing up function ,, clearing eventListeners or CancelingAnimationFrameRequest,, \r\n            cleanUpFunction();\r\n        }\r\n\r\n\r\n    }, [])\r\n\r\n    const resizeHandler = () => {\r\n\r\n        // only to set the size of canvas after resize \r\n        CanvasRef.current.height = CanvasRef.current.offsetHeight\r\n        CanvasRef.current.width = CanvasRef.current.offsetWidth\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.Canvas}>\r\n            <canvas ref={CanvasRef} className={classes.CanvasStyle}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Canvas\r\n","export const makeBackground = (ctx, canvas) => {\r\n    ctx.fillStyle = \"#171717\" \r\n    ctx.rect(0, 0, canvas.width, canvas.height)\r\n    ctx.fill();\r\n}\r\n","\n//components\nimport Canvas from \"./components/Canvas/Canvas\"\nimport Home from \"./components/Wish/Home/Home\"\n\n\n//classes\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas />\n      {/* <Home /> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Canvas\":\"_2tcJH2eRT28nsKyCJvrzJd\",\"CanvasStyle\":\"zHI5iEIGsnsgB-QGpBBuV\"};"],"sourceRoot":""}